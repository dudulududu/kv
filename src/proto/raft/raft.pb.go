// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AppendEntryArg struct {
	Term                 int32       `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId             string      `protobuf:"bytes,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PreLogIndex          int32       `protobuf:"varint,3,opt,name=PreLogIndex,proto3" json:"PreLogIndex,omitempty"`
	PreLogTerm           int32       `protobuf:"varint,4,opt,name=PreLogTerm,proto3" json:"PreLogTerm,omitempty"`
	Entries              []*LogEntry `protobuf:"bytes,5,rep,name=Entries,proto3" json:"Entries,omitempty"`
	LeaderCommit         int32       `protobuf:"varint,6,opt,name=LeaderCommit,proto3" json:"LeaderCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppendEntryArg) Reset()         { *m = AppendEntryArg{} }
func (m *AppendEntryArg) String() string { return proto.CompactTextString(m) }
func (*AppendEntryArg) ProtoMessage()    {}
func (*AppendEntryArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *AppendEntryArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntryArg.Unmarshal(m, b)
}
func (m *AppendEntryArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntryArg.Marshal(b, m, deterministic)
}
func (m *AppendEntryArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntryArg.Merge(m, src)
}
func (m *AppendEntryArg) XXX_Size() int {
	return xxx_messageInfo_AppendEntryArg.Size(m)
}
func (m *AppendEntryArg) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntryArg.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntryArg proto.InternalMessageInfo

func (m *AppendEntryArg) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntryArg) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntryArg) GetPreLogIndex() int32 {
	if m != nil {
		return m.PreLogIndex
	}
	return 0
}

func (m *AppendEntryArg) GetPreLogTerm() int32 {
	if m != nil {
		return m.PreLogTerm
	}
	return 0
}

func (m *AppendEntryArg) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntryArg) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntryReply struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	ConflictTerm         int32    `protobuf:"varint,3,opt,name=ConflictTerm,proto3" json:"ConflictTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntryReply) Reset()         { *m = AppendEntryReply{} }
func (m *AppendEntryReply) String() string { return proto.CompactTextString(m) }
func (*AppendEntryReply) ProtoMessage()    {}
func (*AppendEntryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *AppendEntryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntryReply.Unmarshal(m, b)
}
func (m *AppendEntryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntryReply.Marshal(b, m, deterministic)
}
func (m *AppendEntryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntryReply.Merge(m, src)
}
func (m *AppendEntryReply) XXX_Size() int {
	return xxx_messageInfo_AppendEntryReply.Size(m)
}
func (m *AppendEntryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntryReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntryReply proto.InternalMessageInfo

func (m *AppendEntryReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntryReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntryReply) GetConflictTerm() int32 {
	if m != nil {
		return m.ConflictTerm
	}
	return 0
}

type RequestVoteArgs struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	CandidateId          string   `protobuf:"bytes,2,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	LastLogIndex         int32    `protobuf:"varint,3,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm          int32    `protobuf:"varint,4,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteArgs) Reset()         { *m = RequestVoteArgs{} }
func (m *RequestVoteArgs) String() string { return proto.CompactTextString(m) }
func (*RequestVoteArgs) ProtoMessage()    {}
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *RequestVoteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteArgs.Unmarshal(m, b)
}
func (m *RequestVoteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteArgs.Marshal(b, m, deterministic)
}
func (m *RequestVoteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteArgs.Merge(m, src)
}
func (m *RequestVoteArgs) XXX_Size() int {
	return xxx_messageInfo_RequestVoteArgs.Size(m)
}
func (m *RequestVoteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteArgs proto.InternalMessageInfo

func (m *RequestVoteArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteArgs) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVoteArgs) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	Term                 int32    `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteReply) Reset()         { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()    {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *RequestVoteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteReply.Unmarshal(m, b)
}
func (m *RequestVoteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteReply.Marshal(b, m, deterministic)
}
func (m *RequestVoteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteReply.Merge(m, src)
}
func (m *RequestVoteReply) XXX_Size() int {
	return xxx_messageInfo_RequestVoteReply.Size(m)
}
func (m *RequestVoteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteReply proto.InternalMessageInfo

func (m *RequestVoteReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type Command struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Cid                  int64    `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Seq                  int32    `protobuf:"varint,5,opt,name=Seq,proto3" json:"Seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Command) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Command) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Command) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Command) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type LogEntry struct {
	Cmd                  *Command `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Term                 int32    `protobuf:"varint,2,opt,name=Term,proto3" json:"Term,omitempty"`
	Index                int32    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{5}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *LogEntry) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*AppendEntryArg)(nil), "raft.AppendEntryArg")
	proto.RegisterType((*AppendEntryReply)(nil), "raft.AppendEntryReply")
	proto.RegisterType((*RequestVoteArgs)(nil), "raft.RequestVoteArgs")
	proto.RegisterType((*RequestVoteReply)(nil), "raft.RequestVoteReply")
	proto.RegisterType((*Command)(nil), "raft.Command")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0xdd, 0x6c, 0x9a, 0x7e, 0x4c, 0x60, 0xa9, 0xac, 0x82, 0xa2, 0x3d, 0x40, 0xe4, 0x53, 0x4f,
	0x7b, 0x28, 0x67, 0x90, 0x4a, 0x84, 0x60, 0x45, 0x0f, 0xc8, 0x0b, 0x7b, 0xe0, 0x66, 0xea, 0x69,
	0x15, 0xa9, 0xf9, 0x58, 0xc7, 0x95, 0xc8, 0x0f, 0xe0, 0xc8, 0x7f, 0xe3, 0x27, 0x21, 0x8f, 0x93,
	0xca, 0x29, 0xbb, 0xb7, 0x99, 0xe7, 0xf9, 0x78, 0xef, 0xd9, 0x06, 0xd0, 0x72, 0x67, 0x6e, 0x6a,
	0x5d, 0x99, 0x8a, 0x8d, 0x6c, 0xcc, 0xff, 0x06, 0x70, 0xb5, 0xae, 0x6b, 0x2c, 0xd5, 0xc7, 0xd2,
	0xe8, 0x76, 0xad, 0xf7, 0x8c, 0xc1, 0xe8, 0x1b, 0xea, 0x22, 0x09, 0xd2, 0x60, 0x19, 0x09, 0x8a,
	0xd9, 0x35, 0x4c, 0x37, 0x28, 0x15, 0xea, 0x5b, 0x95, 0x5c, 0xa6, 0xc1, 0x72, 0x26, 0x4e, 0x39,
	0x4b, 0x21, 0xfe, 0xaa, 0x71, 0x53, 0xed, 0x6f, 0x4b, 0x85, 0xbf, 0x92, 0x90, 0xda, 0x7c, 0x88,
	0xbd, 0x06, 0x70, 0x29, 0xcd, 0x1d, 0x51, 0x81, 0x87, 0xb0, 0x25, 0x4c, 0xec, 0xf6, 0x1c, 0x9b,
	0x24, 0x4a, 0xc3, 0x65, 0xbc, 0xba, 0xba, 0x21, 0xa2, 0x9b, 0x6a, 0x4f, 0xac, 0x44, 0x7f, 0xcc,
	0x38, 0x3c, 0x73, 0x7b, 0xb3, 0xaa, 0x28, 0x72, 0x93, 0x8c, 0x69, 0xd6, 0x00, 0xe3, 0x0a, 0xe6,
	0x9e, 0x22, 0x81, 0xf5, 0xa1, 0x7d, 0x54, 0x53, 0x02, 0x93, 0xbb, 0xe3, 0x76, 0x8b, 0x4d, 0x43,
	0x92, 0xa6, 0xa2, 0x4f, 0xed, 0x96, 0xac, 0x2a, 0x77, 0x87, 0x7c, 0x6b, 0xa8, 0xcb, 0x49, 0x1a,
	0x60, 0xfc, 0x4f, 0x00, 0x2f, 0x04, 0x3e, 0x1c, 0xb1, 0x31, 0xf7, 0x95, 0xc1, 0xb5, 0xde, 0x37,
	0x8f, 0x6e, 0x49, 0x21, 0xce, 0x64, 0xa9, 0x72, 0x25, 0x0d, 0x9e, 0xcc, 0xf3, 0x21, 0xd2, 0x24,
	0x1b, 0x73, 0x66, 0xe0, 0x00, 0xb3, 0x53, 0xba, 0xdc, 0xb3, 0xd0, 0x87, 0xf8, 0x67, 0x98, 0x7b,
	0x74, 0x9e, 0x56, 0x9d, 0x42, 0x6c, 0x0b, 0x3e, 0x69, 0x59, 0x1a, 0x54, 0x9d, 0x72, 0x1f, 0xe2,
	0x39, 0x4c, 0xac, 0x93, 0xb2, 0x54, 0x6c, 0x0e, 0xe1, 0x17, 0x6c, 0xa9, 0x7f, 0x26, 0x6c, 0xc8,
	0x16, 0x10, 0xdd, 0xcb, 0xc3, 0x11, 0x3b, 0x21, 0x2e, 0xb1, 0x75, 0x59, 0xae, 0x88, 0x79, 0x28,
	0x6c, 0x48, 0xab, 0xdb, 0x1a, 0x89, 0xe9, 0x4c, 0x50, 0x6c, 0xab, 0xee, 0xf0, 0x21, 0x89, 0x88,
	0x8d, 0x0d, 0xf9, 0x77, 0x98, 0xf6, 0x77, 0xcc, 0xde, 0x40, 0x98, 0x15, 0x8a, 0x76, 0xc5, 0xab,
	0xe7, 0xee, 0x01, 0x74, 0x3c, 0x84, 0x3d, 0x39, 0xa9, 0xb9, 0xf4, 0xd4, 0x2c, 0x20, 0xf2, 0x4d,
	0x73, 0xc9, 0xea, 0x77, 0x00, 0x23, 0x21, 0x77, 0x86, 0xbd, 0x83, 0xd8, 0x7b, 0x0a, 0x6c, 0xe1,
	0xa6, 0x0e, 0xdf, 0xfb, 0xf5, 0xab, 0xff, 0x50, 0x72, 0x8f, 0x5f, 0xb0, 0xf7, 0x10, 0x7b, 0x9e,
	0xb2, 0x97, 0xae, 0xf0, 0xec, 0xd6, 0xfb, 0xfe, 0x73, 0xf7, 0xf9, 0xc5, 0x87, 0xf1, 0x0f, 0xfa,
	0x64, 0x3f, 0xc7, 0xf4, 0xe3, 0xde, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x81, 0xa2, 0xb2, 0x6a,
	0x7f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	AppendEntry(ctx context.Context, in *AppendEntryArg, opts ...grpc.CallOption) (*AppendEntryReply, error)
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AppendEntry(ctx context.Context, in *AppendEntryArg, opts ...grpc.CallOption) (*AppendEntryReply, error) {
	out := new(AppendEntryReply)
	err := c.cc.Invoke(ctx, "/raft.Raft/AppendEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/raft.Raft/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	AppendEntry(context.Context, *AppendEntryArg) (*AppendEntryReply, error)
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) AppendEntry(ctx context.Context, req *AppendEntryArg) (*AppendEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntry not implemented")
}
func (*UnimplementedRaftServer) RequestVote(ctx context.Context, req *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AppendEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/AppendEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntry(ctx, req.(*AppendEntryArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntry",
			Handler:    _Raft_AppendEntry_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
